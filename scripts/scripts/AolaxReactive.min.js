/*!
 * aolax.min.js v0.0.1
 * (c) 2022-2023 Marlon Cruz Ovalles kurosaky970828@gmail.com
 * Mmenu Company 
 * menu24horas.com
 * Released under the MIT License.
 */

'use strict';

class ReactiveAolax {
    inmutable = false;
    lock = false;el
    el = null;
    nodelist = null;
    selector = null;
    html = null;

    static components = {}

    keys = {};
    class = {};
    attr = {};
    styles = {};
    stylesheet = {}
    methods = {};
    event = ['click', 'dblclick', 'onmousedown', 'onmouseenter', 'onmouseleave', 'onmousemove', 'onmouseover', 'onmouseout', 'onmouseup', 'contextmenu', 'keydown', 'keypress', 'keyup', 'onfocus', 'blur', 'input', 'change', 'select', 'submit', 'reset', 'load', 'unload', 'resize', 'cut', 'copy', 'paste', 'drag', 'dragend', 'dragenter', 'dragleave', 'dragover', 'dragstart', 'drop', 'canplay', 'play', 'playing', 'pause', 'ended', 'complete', 'disabled', 'enabled', 'offline', 'online', 'statuschange'];
    eventDom = ['DOMAttrModified', 'DOMCharacterDataModified', 'DOMContentLoaded', 'DOMElementNameChanged', 'DOMNodeInserted', 'DOMNodeInsertedIntoDocument', 'DOMNodeRemoved', 'DOMNodeRemovedFromDocument', 'DOMSubtreeModified'];

    constructor(object){
        this.object = object;
        
    }
    _ini_(){
        var o = this.object;
        if(o.styles){
            AolaxReactiveRenderStyles(o.styles, o.name);
        }
    }
    _init_(){
        this._ini_();
        this._axr_();
        this._start_();
    }
    _axr_(){
        this.name = this.object.name;
        if(this.name){
            console.log("se ejecuto el componente "+this.name)
            this.el = document.getElementsByTagName(this.name);
            this.selector = null;
        }else{
            this.el = (typeof $.getElement == 'function')?$.getElement(this.object.el):this._getElement_(this.object.el);
            this.selector = this.object.el || false;
            if(!this.selector) throw("es necesario pasar un selector de un elemento HTML");
        }
        this.x = (this.el.tagName)? this.el: (this._isObject_(this.el))?this.el[0]:0;
        this.y = (this.el.tagName)? [this.el]: (this._isObject_(this.el))?this.el:0;
    }
    _start_(){

        this.option = this.option || {required: false}
        this.data = this.object.data || {};
        this.methods = this.object.methods || {};
        this.computed = this.object.computed || {};
        this.template = this.object.template || 0;
        this.component = this.object.components || {};
        this.stylesheet = this.object.styles || false;

        for (let key in this.methods) {
            if(this[key] != undefined) throw(" El metodo "+key+" no puede ser usado porque ya existe dentro de AolaxReactive");
            this[key] = this.methods[key];
        }

        this.renderTemplate();
        this.eachChild();
        this.keyChange();
        this.addClass();
        this.addAttr();
        this.addStyles();
        this.renderComponent();
        this.addOterVar();
        
        if(this.init){this.init()}
    }
    _getElement_(a, b=document){
        var r;
        if(this._isObject_(a)){
            return a;
        }
        else if(this._isType_(a, 'string')){
    
            if(a.includes(".") || (a.includes("#") && a.includes(" "))){
                r = b.querySelectorAll(a);
                r = r.length>0 ? r : null;
            }else{
                r = b.querySelector(a);
            }
            if(r == null) throw("El elemento "+a+" no existe en este contexto")
            else return r;
        }
        else {
            throw(" El Selector pasado en la funcion $() tiene que ser un Objeto, "+a);
        }
        
    }
    _isObject_(v, b){
        if (v === null)  return 0;
        if(!b) return ( (typeof v === 'function') || (typeof v === 'object') );
        return typeof v === b;
    }
    _isType_(a, b){
        if (a === null)  return 0;
        if(!b) return ( (typeof a == 'function') || (typeof a == 'object') );
        return typeof a ==  b;
    }
    _watch_(nodo, callback, el=[this], v=0, isTrue=0){
        if (!callback instanceof Function) throw TypeError("action is not a function");
        let valorAntiguo = this[nodo] || this.data[nodo];
        if(!Object.getOwnPropertyDescriptor(this, nodo)){
            console.log(' definiendo la propiedad '+nodo+ ' en '+this.name)
            Object.defineProperty(this, nodo, {
                get: function(){
                    return valorAntiguo;
                },
                set: function(newValor){
                    for(let x = 0; x < el.length; x++){
                        if(v){
                            console.log("paso por v 1 "+JSON.stringify(v)+" nodo "+nodo)
                            callback(newValor, v[x], el[x], isTrue[x], this, x);
                        }else{
                            console.log("paso por v 2 "+JSON.stringify(v)+" nodo "+nodo);
                            callback(newValor, valorAntiguo || undefined, el[x], isTrue, this, x);
                        }
                    };
                    valorAntiguo = newValor;
                }
            });
        }else throw(' Error la clave '+nodo+' ya esta declarada en este elemento');
    }
    renderComponent(){
        var a;
        for(let n of this.y){
                for(let c in this.component){
                if(!ReactiveAolax.components[c]) throw("El componente: '"+c+"' no esta creado o esta mal escrita la clave del nombre");
                this[c] = ReactiveAolax.components[c];
                this[c].object = AolaxReactive.mergeComponent(this[c].object, this.component[c]);
                this[c]._init_();
            }
        }
    }
    renderTemplate(){
        for(let a of this.y){
            var txt = a.innerHTML, b = this.template;
            a.innerHTML = b?b:"";
            var child, m;
            
            while (1){
                child = a.children;
                m = child.length;
                if(m > 0){
                    m = (m-1)%2 > 0?(m-2)/2:(m-1)/2
                    a = child[m]
                }else{
                    break;
                }
            }
            a.innerHTML = a.innerHTML + txt;
        }
    }
    
    eachChild(e=0){
        if(e){
            if(!e instanceof Object) throw("Es necesario un objeto html. Objeto: "+JSON.stringify(e));
        }
        for(let c of e || this.y){
            this.startChild(c);
        }
    }
    startChild(e){
        var a, b;
        a = e.children;
        for(let x = 0; x < a.length; x++){
            b = a[x];
            this.compAttr(b);
            this.startChild(b);
        }
    }
    textContent(c){
        
        var txt = c.innerHTML, childs = c.children, text;
        for(let ch of childs){
            txt = txt.replace(ch.innerHTML, "");
        }
        return txt.trim();
    }
    compAttr(c){
        //this.textContent(c)
        //return;
        for (let key in this.data) {
            var reg = new RegExp('\\$*\\{{1}\\s*('+key+')\\s*\\}{1}', 'g'), txt = this.textContent(c), html = c.innerHTML;
            var busq = txt.matchAll(reg);
            
            if(busq != null){
                for(let b of busq){
                    if(b == undefined){continue}
                    if(!this.keys[key]){
                        
                        this.keys[key] = {
                            key: key,
                            value: [],
                            el: [],
                            text: []
                        };
                    }
                    c.innerHTML = c.innerHTML.replace(b[0], this.data[key]);
                    this.keys[key].value.push(this.data[key]);
                    this.keys[key].el.push(c);
                    this.keys[key].text.push(html);
                }
                
            }
        } 
        if(c.hasAttribute(":class")){
            var at, _key, key, value, att = c.getAttribute(":class").trim().split(";");
            for(let x = 0; x < att.length; x++){
                at = att[x].replace(/[\s|\{|\}]/g, "").split(":");
                _key = at[1].replace(/[\'|\"|\s|\{|\}]/g, "");
                key = _key.replace("!", "");
                value = at[0];
                
                if(value.includes('"')||value.includes("'")){
                    value = value.replace(/[\'|\"]/g, "");
                }else{
                    value = this.data[value] || value;
                }
                if(!this.class[key]){
                    
                    this.class[key] = {
                        true: [],
                        key: key,
                        value: [],
                        el: []
                    };
                }
                this.class[key].value.push(value);
                this.class[key].el.push(c);
                
                if(_key.includes("!")){
                    this.class[key].true.push(false);
                    
                    if(!this.data[key]){
                        c.classList.add(value);
                    }else{
                        c.classList.remove(value);
                    }
                }else{
                    this.class[key].true.push(true);
                    
                    if(this.data[key]){
                        c.classList.add(value);
                    }else{
                        c.classList.remove(value);
                    }
                } 
                
            };
            c.removeAttribute(":class");
        }
        if(c.hasAttribute(":attr")){
            var at, _key, key, value, attr = c.getAttribute(":attr").trim().split(";");
            for(let att of attr){
                at = att.replace(/[\s|\{|\}]/g, "").split(":");
                _key = at[1].replace(/[\'|\"|\s|\{|\}]/g, "");
                key = _key.replace("!", "");
                value = at[0];
                
                if(value.includes('"')||value.includes("'")){
                    value = value.replace(/[\'|\"]/g, "");
                }else if(this.data[value] != undefined){
                    value = this.data[value];
                }else{
                    throw("la clave "+value+" no existe o le faltan las comillas '' ")
                }
                if(!this.attr[key]){
                    
                    this.attr[key] = {
                        key: key,
                        value: [],
                        el: []
                    };
                }
                this.attr[key].value.push(value);
                this.attr[key].el.push(c);
                
                if(this.data[key] != undefined){
                    c.setAttribute(value, this.data[key]);
                }else if(this.methods[key] != undefined){
                    throw("No se puede referenciar al metodos dentro de la funcion :styles, error: "+key);
                }
            };
            c.removeAttribute(":attr");
        }
        if(c.hasAttribute(":style")){
            var at, _key, key, value, attr = c.getAttribute(":style").trim().split(";");
            for(let att of attr){
                at = att.replace(/[\s|\{|\}]/g, "").split(":");
                _key = at[1].replace(/[\'|\"|\s|\{|\}]/g, "");
                key = _key.replace("!", "");
                value = at[0];
                
                if(value.includes('"')||value.includes("'")){
                    value = value.replace(/[\'|\"]/g, "");
                }else if(this.data[value] != undefined){
                    value = this.data[value];
                }else{
                    throw("la clave "+value+" no existe o le faltan las comillas '' ")
                }
                if(!this.styles[key]){
                    
                    this.styles[key] = {
                        key: key,
                        value: [],
                        el: []
                    };
                }
                this.styles[key].value.push(value);
                this.styles[key].el.push(c);
                
                if(this.data[key] != undefined){
                    c.style[value] = this.data[key];
                }else if(this.methods[key] != undefined){
                    throw("No se puede referenciar al metodos dentro de la funcion :styles, error: "+key);
                }
            };
            c.removeAttribute(":style");
        }
        for(let evento of this.event){
            if(c.hasAttribute(":"+evento)){
                var at, _key, key, value, attr = c.getAttribute(":"+evento).trim().split(";");
                for(let att of attr){
                    at = att.replace(/[\s|\{|\}\(|\)]/g, "");
                    this.addEvent(at, c, evento);
                };
            }
        }
        
    }
    keyChange(){
        for(let key in this.keys){
            var data = this.keys[key];
            console.log('el data '+data.value+' key '+key)
            this._watch_(key, function(keyValue, value, elemet, text, rq, x){
                elemet.innerHTML = elemet.innerHTML.replace(value, keyValue);
                rq.keys[key].value[x] = keyValue;
            }, data.el, data.value, data.text);
        }
        
    }
    observe(element, callback=false, characterData = true, attributes = false, childList = false, subtree = false, attributeOldValue = false, characterDataOldValue = false){
        const observerOptions = {
            characterData: characterData,
            attributes: attributes,
            childList: childList,
            subtree: subtree,
            attributeOldValue: attributeOldValue,
            characterDataOldValue: characterDataOldValue
        };
        const observer = new MutationObserver((mutationList) => {
            mutationList.forEach((mutation) => {
            if (mutation.addedNodes.length) {
                console.log('Añadido', mutation.addedNodes[0]);
                element.html = element.html.replace()
            }
            if (mutation.removedNodes.length) {
                console.log('Eliminado', mutation.removedNodes[0]);
            }
            console.log(mutation.type);
            })
        });
        observer.observe(element.el, observerOptions);
    }
    addClass(){
        for(let key in this.class){
            var data = this.class[key];
            this._watch_(key, function(keyValue, value, elemet, isTrue, rq){
                if(isTrue){
                    if(keyValue){
                        elemet.classList.add(value);
                    }else{
                        elemet.classList.remove(value);
                    }
                }else{
                    if(!keyValue){
                        elemet.classList.add(value);
                    }else{
                        elemet.classList.remove(value);
                    }
                }
            }, data.el, data.value, data.true);
        }
        
    }
    addAttr(){
        for(let key in this.attr){
            var data = this.attr[key];
            this._watch_(key, function(keyValue, value, elemet, isTrue, rq){
                elemet.setAttribute(value, keyValue);
            }, data.el, data.value, data.true, this);
        }
        
    }
    addStyles(){
        for(let key in this.styles){
            var data = this.styles[key];
            this._watch_(key, function(keyValue, value, elemet, isTrue, rq){
                elemet.style[value] = keyValue;
            }, data.el, data.value, data.true, this);
        }
        
    }
    addEvent(funct, element, event){
        element.addEventListener(event, this.click.bind(this, funct, element));
    }
    addOterVar(){
        for(let k in this.data){
            if(this[k] == undefined){
                this[k] = this.data[k];
            }
        }
    }
    click(funct, element, event){
        this[funct](funct, element, event);
    }
    static createComponent(a){
        
    }
}
var AolaxReactive = (a) => {
    var c = new ReactiveAolax(a);
    document.addEventListener('DOMContentLoaded', AolaxReactive.startComponent.bind(this, c));
    return c;
}
const style = document.createElement('style');
document.getElementsByTagName('head')[0].appendChild(style);
AolaxReactive.sheet = style.sheet;
AolaxReactive.styles = [];
AolaxReactive.selectors = [];

AolaxReactive.createComponent = (a) => {
    var n = a.name, c;
    if(n == undefined) throw("Los componentes tienen que tener un elemento 'name' con el nombre");
    if(ReactiveAolax.components[n] != undefined) throw("Ya existe un componente declarado con este nombre: "+n);
    
    c = new ReactiveAolax(a);
    ReactiveAolax.components[a.name] = c;
    return c;
}
AolaxReactive.extend = (a, b) =>{
    if(!a instanceof String) throw("Es necesario que pase el nombre del componente del que se quiere exteder como segundo parametro");
    if(ReactiveAolax.components[a] == undefined) throw("EL componente del que se quiere extender no existe o no se a creado aun: "+a);
    b = AolaxReactive.mergeComponent(a, b);
    return AolaxReactive.createComponent(b);
}
AolaxReactive.mergeComponent = (a, b) => {
    var c = AolaxReactive.merge, d = a instanceof Object ? a : ReactiveAolax.components[a].object;
    b = c(b, d);
    b.option = c(b.option, d.option);
    b.data = c(b.data, d.data);
    b.methods = c(b.methods, d.methods);
    b.components = c(b.components, d.components);
    b.computed = c(b.computed, d.computed);
    return b;
}
AolaxReactive.merge = (o, s) => {
    for(let k in s){
        if(!o[k]){
            o[k] = s[k]
        }
    }
    return o;
}
AolaxReactive.startComponent = (a) =>{
    a._init_();
}
var sty = `
#card-name div div::before {
    content:'';
    margin-bottom:  20px;
    border: 1px solid blue;
    padding: 10px;
}
#card-name div > div .mmmmmmmmmm{
    margin-bottom: 20px;
    border: 1px solid blue;
    padding: 10px;
}
#card-marlon {
    margin-top: 20px;
    border: 1px solid blue;
    width: 10px;
}
#card-marlon {
    margin-top: 20px 10px;
    border: 1px solid blue;
    width: 10px;
    display: block;
}
#card-name {
    display: block;
}
`;

//AolaxReactiveRenderStyles(sty);
async function AolaxReactiveRenderStyles(a, component){
    var pat = new RegExp("(\.|\#?[a-zA-Z0-9\-\\s\.\#:<>,]*),*\\s*(\{(.|\\s)*)", 'g'), 
    pat2 = new RegExp("(.*)\\s*:\\s*(.*)\\s*,?", 'g'), 
    pat3 = new RegExp("([a-zA-Z\\-]*)\\s*:\\s*(.*)\\s*;", 'g'),
    pp = new RegExp('\}\\s*(\.|\#?[a-zA-Z0-9\-\\s\.\#:<>\+\(\)@\,]*)\\s*\{', 'g')

    a = a.replace(pat3, '\"$1\":\"$2\",');
    a = a.replace(/,\s*}/g, '}');
    a = a.replace(/\/n/g, '');
    a = a.replace(pp, '}&$1{').split('&');

    for(let b of a){
        var regla = b.matchAll(pat)
        if(regla != null){
            for(let bsq of regla){
                if(bsq == undefined)continue;
                var is = 0, line = '{', error = bsq[2];
                try{
                    var comp = bsq[2].matchAll(pat2)
                    if(comp != null){
                        for(let com of comp){
                            if(com == undefined){continue}
                            
                            /*
                            if(com[0].search(/,/g) < 0 && com[0].search(/}/g) < 0){
                                console.error('Falta el ; en la regla '+bsq[1]+ ' linea: '+com[0]);
                                continue;
                            }
                            */
                            line += com[0].trim();
                            error = error.replace(com[0], '');
                        }
                        
                        error = error.replace(/(\{|\})/g, '');
                        //alert('el error: Error de sintaxis en el componente '+component+' en la regla: '+bsq[1]+ ' declaraciones: '+error.length+ ' 888 '+error)
                        if(error.length > 1)console.error('Error de sintaxis en el '+(component)?'Componente '+component: 'en el Elemento '+'en la regla: '+bsq[1]+ ' declaraciones: '+error);
                        if(!line.includes('}'))line+='}';
                        
                        bsq[2] = line.replace(/,\s*}/g, '}');
                    }else console.log(' no se encontro ');
                    
                    try{
                        var json = JSON.parse(bsq[2]);
                    }catch(e){
                        console.error('Existe un error de sintaxis en la regla: '+bsq[1]+ ' '+bsq[2], e);
                        continue;
                    }
                    for(let s of AolaxReactive.styles){
                            
                        if(s.selector == bsq[1]){
                            s.styles = AolaxReactive.merge(s.styles, json);
                        }
                    }
    
                    if(!AolaxReactive.selectors.includes(bsq[1])){
                        AolaxReactive.styles.push({
                            selector: bsq[1],
                            styles: json
                        });
                        AolaxReactive.selectors.push(bsq[1])
                    }
                }catch(e){
                    console.error(e)
                }
            }
        }else console.log(' es null ')
    }
    for(let s of AolaxReactive.styles){
        var txt = stylesToString(s);
        AolaxReactive.sheet.insertRule(txt);
    }
}
function stylesToString(a){
    var b = a.selector+'{', c = a.styles;
    for(let k in c){
        b += k+':'+c[k]+';';
    }
    return b+'}'
}
/*
var component2 = AolaxReactive.createComponent({
    name: "component2",
    options: {
        auto: false,
        required: true,
    },
    data: {
        data1: "amanda",
        data2: "serrano",
        data3: "blanco"
    },
    methods: {
        metodo2: function(){ alert("metodo 2 amanda "+this.data1)}
    },
    template: '<div id="card-name" class="el-form-item is-required is-no-asterisk"><label for="name" class="el-form-item__label" :click="metodo2">Nombre: ${data1} ${data2} ${data3}</label> cumpleaños: ${dia}/${mes}/${año}</div>' 

})
*/
/*
var componet3 = AolaxReactive.extend("component2", {
    name: "component3",
    data: {
        data1: "carlos",
        data2: "Rafael",
        data3: "Delgado Reyes",
        dia: 31,
        mes: 5,
        año: 1997
    },
    methods: {
        metodo3: function(){  alert("metodo 3 amanda "+this.data1)}
    },
    //template: '<div id="card-name" class="el-form-item is-required is-no-asterisk"><label for="name" class="el-form-item__label" :click="metodo2">Nombre: ${data1} ${data2} ${data3} ${media}</label></div>' 

})*/
/*
var component1 = AolaxReactive.createComponent({
    name: "component1",
    options: {
        required: true,
    },
    data: {
        data1: "marlon",
        data2: "cruz",
        data3: "ovalles"
    },
    methods: {
        metodo1: function(){ alert("metodo 1"); this.data1 = " Amanda "}
    },
    template: '<div id="card-name" class="el-form-item is-required is-no-asterisk"><label for="name" class="el-form-item__label" :click="metodo2">Nombre: ${data1} ${data2} ${data3} ${media}</label></div>',
})

var probando = AolaxReactive({
    el: "#el-form-card",
    data: {
        data1: "marlon",
        data2: "amanda"
    },
    components:{
        component1: {
            data: {
                media: "reproductor"
            },
            styles: `
                #card-name {
                    margin: 20px 10px;
                    border: 1px solid blue;
                    padding: 10px;
                }

            `
        },
        
    },
    styles: `
    #card-name div div div {
        content:'';
        margin-bottom:  20px;
        border: 1px solid blue;
        padding: 10px;
    }`,
});
*/
/*
var mNumOrder = AolaxReactive({
    el: '#numorder',
    data: {
        numeroOrden: $('#numorder').attr('orden'),
        name: 'marlonn',
        apellidos: 'cruz',
        isorder: 1,
    },
    computed: {
        numOrden: {
          get: function () {
            return this.numeroOrden
          },
          set: function (n) {
            this.numeroOrden = n
          }
        }
      }
});

var mFixedFoot = AolaxReactive({
    inmutable: true,
    el: '#fixed-foot',
    data: {
        name: 'marlonn',
        apellidos: 'cruz',
        isorder: 1,

        isActiveDomicilio: $('#v-domicilio').hasClass("el-radio-button__inner"),
        isSelectedDomicilio: 1,
        styleZoneDir: "block",
        textSendWhatSapp: 'Enviar a Whatsapp',
        isDisableWSp: 0,
        styleFlex: "flex",
        blue: "red",
        attrPrueva: "probando",
        attrPrueva2: "probando2",
        eltextoprueva: "nombre de la zona "
    },
    
    methods: {
        btnDomicilio: function (a, b) {
            this.isSelectedDomicilio = 1;
            this.styleZoneDir = "block";
            console.log("marlon addEventListener se ejecuto btn domicilio ");
            //activeBtnWhattSapp();
        },
        btnLocal: function(a, b){
            this.isSelectedDomicilio = 0;
            this.styleZoneDir = "none"
            alert("se ejecuto btn local "+this.textSendWhatSapp)
            //activeBtnWhattSapp();
        },
        btnSendWhatSapp: function () {
            if(!this.isDisableWSp){
                console.log(" el boton esta "+this.isDisableWSp)
                sendWhattSapp();
            }else{
                console.log("no esta activo el boton")
            }
        },
        probarStyle: function(a){
            alert("esta dentro del metodo probar styles "+this.data.styleFlex+" this "+this.styleFlex);
            return this.styleFlex;
        },
        alert1: function(){alert("alert 1 "+ this.name)},
        alert2: function(){alert("alert 2 "+ this.name)}
    }
    
})*/